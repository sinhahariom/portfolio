export var BlogData = [
    {"title":"'A Zero in SetTimeOut', said JavaScript","subTitle":"Hariom Sinha. March 7/2021", "id":1,"blogContent":" <p>Hey There ! <br/> Out of the zillion things we do while writing a JavaScript Code, all of us comes to a point where we need to render stuffs based on some time intervals. And well, all thanks to JavaScript, it has given us “setTimeout”. <br/> We all know the code to do that ,but have you ever thought how it does ? Or Why ? <br/> This is Hariom Sinha here and I am going to tell you one brief detail about how set timeout works followed by a Code Piece :). <br/> Lets say, you have to print A, B, C and D in some sequence, but , but, but, .. you need to print C at the last. What I mean to say is that, you have to print something like this : <br/> A <br/> B <br/> D <br/> C <br/> onto you console. <br/> So, to do this, we all know, we will do something like this : <br/> console.log(“A”); <br/> console.log(“B”); <br/> setTimeout(()=>{ console.log(“C”); } , some-defined-wait-time ); <br/> console.log(“D”); <br/> And, Thats it, the dish is served. But how the heck the Chef did that ? Well lets see.. <br/> So, JavaScript has something called “Event Loop” where it moves a process / request to some defined states and then help us get that done. <br/> <br/> For the first console.log(“A”), the event loop dumps the process first to the Execution Stack and prints it. <br/> For the second console.log(“B”), same. <br/> For the third console.log(“C”), the event loop dumps the process first to the Execution Stack, and then, when it sees it to be a set timeout, it puts that process to the Queue Table. The only task of Queue table here is to keep that process till it completes its “some-defined-wait-time”. And ,when it does so, it dumps that to the Event Queue. Now, the third and the last step comes. Since the process inside the timeout has already spent a zillion of “some-defined-wait-time”, it wants to get printed. Isn’t it ? But as soon as this is dumped to the Event Queue, Event Loop sees another process in the Execution Table ( well, no one waits for anyone here .. #async ). So, to keep things simple, Event Loop processes the fourth console.log(“D”) and then once the stack gets empty, it prints the “the long waited..”C”. <br/> This means, Stack gets a higher precedence than the Queue because of the ASYNC nature here. <br/> This is how its done. So much of work to do some small print. <br/> Well, but why the crap, the title of this Blog has a “Zero” in it. <br/> Lets see why .. <br/> What would you think if i ask you to tell me if below is right or wrong.. <br/> setTimeout(someMethod, 0); // for the third console.log above. <br/> Think. <br/> Since you have came so far till here, you must have known the easy process the SetTimeout follows to process its function, you know that it has to wait for sometime in the Event Table. Here, this ‘sometime’ is zero. But since then, it has to move to the to the Event Queue, it has to wait until the stack gets cleared. This means, even if it has a zero wait, it has to wait for all. <br/> #Even Zero Matters. <br/> Hope you have understood this well and if you have any doubts, thoughts or appreciation, do let me know on Comments tabs. <br/> Happy Dev. <br/> Hariom. </p>"},
    {"title":"Scalability, An Apple Seller Story.","subTitle":"Hariom Sinha. March 25/2021", "id":2,"blogContent":" <p>Imagine a Apple Fruit seller selling his bucket of apples every day and night. He is just a small business man who dreams of selling as much of his buckets as he can. He is a goal seeker and he believes in underlying process and small realistic goals. Though, at the start of this new business, he has a bunch of Customers buying from him every then and now. Whenever a new Customer comes, he actively guides him to buy the best fruit he has. <br/> Imagine a time, when his business is at peak. The Customers are growing day and night because of the quality he sells. But with the surge in numbers, he is not able to manage all of them and many a times the Customers are getting annoyed of not getting a chance to buy the best Apples as they were before. <br/> <br/> <b>This is a Scaling Problem.</b> <br/> <br/> Everything starts with a zero, but as soon as the steps grow, one has to manifest his or her way of delivering stuffs. As the Customers started to surge and the man being alone, limited in number of staffs and resources, following the old and expensive way of selling Apples, suddenly, sees decrease in the Business growth. But, Why the heck this happened ? With the Sudden increase in the number of Customers, he should have increased the number of selling Stalls. Increasing the number of Staffs per Stalls would have solved the problem. Even if he has increased the number of Stalls, he should have to used a way to deploy the stalls as per Customer Count. Storage also has played an important role in Scaling his Business while going high on numbers. Now, You must be wondering why the heck i told you this story of a Business. Well in case of Application development, the narration is no different. Everything starts small, but once things starts to step high and well, using the right process and resources from the beginning plays an important role in Customer Satisfaction. <br/> <br/> <b>According to Google, 61% of Users wont give an App a second chance if they have the bad experience on the first use. And so, 40% of them decides to go to the Existing competitors.</b> <br/> <br/> On a real high note, Not only rookie small Businesses like our Apple Seller, many big companies have done such mistake in the starting stages of their growth which has led them to see a never come back situation. Disney ran into such trouble when they launched their first streaming App. It led on the same story. The initial stages took flight, but once the number of Customers started to increase, the App failed to handle so much traffic on its Servers. Post this incident, they had to shut down the entire App and then what happened, they never came back with their own App. So, now the question comes. What is the right way then. Well, this is a long discussion to cover, but in shorter terms and explanation, one has to take care of the Storage, Usage handle, Proper Load balancers, Efficient Code, Caching, Asynchronous Processing and many other efficient ways. Let me wrap this one with putting our Apple seller into the picture. As soon as the Seller started to see a proper growth in his business, he starts to set higher storage for his Apples which are safe and robust ( Our Databases ). He increased the number of stalls for the Customers in his shop ( the number of end point servers ), which goes by him throughout at the shop stop ( the Load Balancer ). To keep flexible number of Staffs and cost management, he only sets certain number of Stalls as per the number of Customers visiting his Shop ( the Primary and Secondary Servers ). He must keep care of the batches of Apples he is selling. As soon as the fresh apples starts to sell out, he orders new buckets into bunches and not wait for the entire lot to sell out ( Asynchronous wait ). He must keep a note of his regular Customers so that they never gets to buy old products and on a longer wait ( Caching and Usage handling ). And once he starts to increase in this way, he goes all well. But the important thing to note here is that, he must be idealized by this process from the beginning. Giving Scalability a priority, so that he never face a bad impression by his Customers. <br/> <br/> This might be a Story — go — easy Blog, but I hope this must have seeded a thought for Scaling while developing a Product. There are many technical aspects of this, of how we can achieve Scaling in an efficient way. I would try to bring that up as soon as I can. Till then, Happy Development. <br/> <br/> <br/> <b>hariom sinha</b> </p>"},
    {"title":"Elastic Search Using Spring Boot","subTitle":"Hariom Sinha. Jan 1/2021", "id":3,"blogContent":" <p>Ever have imaged how the things would change when we will get to look for the Pages with the words rather than the words in the Pages of a Dictionary…Well, not in this Scenario, but when we will take Spring Data into our consideration, this will surely make life easier. <br/> We usually implement the functionality like Pagination and Sorting independently in our Backend Application, but Spring Boot’s Elastic Search brings all of them together and serves us with the Response we always look for in our Query Requests. <br/> Consider we have data of n number of Employee in an organization, which are mapped together into Entities in the Database. For every Use Case where we need to get any specific data about one Employee, we usually do a JPA Interface request from our Repository and once we get that response, we start using the basic libraries of Pagination and Sorting at our backend. <br/> But with Elastic Search, this all comes inside one wrapped response JSON and it provides all the convenient information needed to make life easier. <br/> So, how does this works. Don’t you think Elastic Search has a Pre Defined Framework of its own and how does it basically arranges things. <br/> All the entities are considered as the Fields in this context and they are wrapped together inside a Document (based on the similar attributes ). These Documents are further contained inside a Shard and these ‘k’ number of shards are wrapped together inside an Index. Shard is nothing but a container of divided Index. <br/> So how does the searching works ? <br/> Any search request goes with a keyword. The framework looks for all the Shards and searches the one which contains that Key. It returns all the related documents containing the fields as the response. So, this makes things faster in a way that it does not have to go to every Entity or leverage a confusing Sub — Sub — Sub Query to get the data. <br/> In short, <br/> Documents : Combination of one or more fields. <br/> Index : Combination of one or more documents. <br/> Shards : Combination of divided Indexes <br/> Whenever a search request comes, the request goes to every Shard and only that Shard is selected whichever has that Search Keyword, and then the further Investigation with the Documents inside that Shard goes on. <br/> To make a basic setup of this, all you need to so is to add a dependency of Elastic Search in the POM file and defined all the entities with the “@Document” Annotation. Further we have to replace the JPA or Cassandra or whatever DB Interface with the Elastic Search Interface in the Repository and that all.. a basic Elastic Search Setup is done. <br/> I will share an Installation and POC like Project soon here for Elastic Search. But before starting this foundation and basic is all we need. <br/> Happy Dev.. <br/> hariom sinha :) </p>"}
]